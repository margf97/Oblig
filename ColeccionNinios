package obligatorio;
import java.util.Calendar;

public class ColeccionNinios {


	private	Ninio [] arregloNinios;
	int tope = 0;
	int maximoNinios = 0;
	int maximoRegistros = 0;


	public void configurar(int pMaximoNinios, int pMaximoRegistros)
	{
		this.maximoNinios = pMaximoNinios;
		arregloNinios = new Ninio[maximoNinios];
		this.maximoRegistros = pMaximoRegistros;
	}

	public int buscarNiño (int pCi)//Recibe una cedula como parametro y la busca en cada niño del arreglo, si la encuentra devuelvue el lugar del arreglo en donde esta el niño, sino devuelve -1
	{
		int j=0;
		boolean esta = false;
		while ((j<tope) && (esta == false))
		{
			if (arregloNinios[j].getCedula() == pCi)
			{
				esta = true;
			}
			else
			{
				j++;
			}
		}
		if ((j == tope) && (esta == false))
		{
			j = -1;
		}
		return j;
	}

	public boolean estaIngresado(int pCedula)//Recibe una cedula por parametro invoca al metodo buscar niño y solo devuelve si este esta ingresado en el arreglo de niños o no.
	{
		boolean estaIngresado = false;
		if (buscarNiño(pCedula) == -1)
		{
			estaIngresado = false;
		}
		else
		{
			estaIngresado = true;
		}
		return estaIngresado;
	}
	

	public void altaNinio(Ninio n)//Recibe un niño por parametro, lo busca en el arreglo, se fija si hay lugar para un nuevo niño  y luego lo ingresa.
	{

		if (buscarNiño(n.getCedula()) == -1)
		{
			if (tope < maximoNinios)
			{
				Registro arreg[] = new Registro [maximoRegistros];
				//Ninio nuevoNinio = new Ninio(Pnombre, Pcedula, PfechNac, PservMed, PmedCab, PtieneF, arreg, 0);
				arregloNinios[tope] = n;
				tope++;
			}
			else
			{
				System.out.println("No hay lugar para ingresar otro niño");//Cambiar
			}
		}
		else
		{
			System.out.println("El niño que esta intentando ingresar ya existe");//Cambiar
		}
	}


	public String[] listarNinios() //Carga todos los datos de cada niño en un String y ese String lo agrega a un arreglo, luego lo muestra en una lista
	{
		String[] arregloDatos = new String[tope];
		String dato;

		for (int i=0; i<tope; i++)
		{
			dato = (arregloNinios[i].getNombre()+" "+arregloNinios[i].getCedula()+arregloNinios[i].getMedicoCab()+arregloNinios[i].getFechaNac()+arregloNinios[i].getFonasa());
			arregloDatos[i] = dato;
			System.out.println(arregloNinios[i].getNombre()+" "+arregloNinios[i].getCedula()+" "+arregloNinios[i].getMedicoCab()+" "+arregloNinios[i].getFonasa());//para prueba NO TIENE LA FECHA
		}
		return arregloDatos;
	}

	public void altaRegistro(Registro r, int pCedula)//Recibe un registro por parametro y una cedula, invoca al metodo altaRegistro y lo ingresa en el arreglo de registros del niño con dicha cedula
	{
		int niño;
		niño = buscarNiño(pCedula); 
		arregloNinios[niño].agregarRegistro(r); 
	}
	
	public Ninio getDatosNiño (int pCedula)
	{
		int niño;
		String datosNiño;
		niño = buscarNiño(pCedula);
		return arregloNinios[niño];
	}

}




















